name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: "0.5.11"

jobs:
  version:
    name: Calculate Version
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      versionTag: ${{ steps.gitversion.outputs.majorMinorPatch }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for GitVersion
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v4
      with:
        versionSpec: '6.x'
        
    - name: Calculate version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v4
        
    - name: Validate tag matches version
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        CALCULATED_VERSION=${{ steps.gitversion.outputs.majorMinorPatch }}
        if [ "$TAG_VERSION" != "$CALCULATED_VERSION" ]; then
          echo "::error::Tag version ($TAG_VERSION) does not match calculated version ($CALCULATED_VERSION)"
          exit 1
        fi
        echo "Tag version matches calculated version: $CALCULATED_VERSION"

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: version
    environment: pypi  # Requires approval for PyPI publishing
    permissions:
      id-token: write  # For trusted PyPI publishing
      contents: write  # For creating GitHub releases
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: ${{ env.UV_VERSION }}
        
    - name: Update version in pyproject.toml
      run: |
        # Update the version in pyproject.toml
        sed -i "s/^version = \".*\"/version = \"${{ needs.version.outputs.versionTag }}\"/" pyproject.toml
        echo "Building release version: ${{ needs.version.outputs.versionTag }}"
        
    - name: Build package
      run: |
        uv build
        
    - name: Check dist contents
      run: |
        ls -la dist/
        
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: false