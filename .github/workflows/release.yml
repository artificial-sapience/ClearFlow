name: Release

on:
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: "0.5.11"

jobs:
  version:
    name: Calculate Version
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      versionTag: ${{ steps.gitversion.outputs.majorMinorPatch }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for GitVersion
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v4
      with:
        versionSpec: '6.x'
        
    - name: Calculate version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v4
        
    - name: Display calculated version
      run: |
        echo "Calculated version: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: version
    environment: pypi  # Requires approval for PyPI publishing
    permissions:
      id-token: write  # For trusted PyPI publishing
      contents: write  # For creating GitHub releases
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: ${{ env.UV_VERSION }}
        
    - name: Update version in pyproject.toml
      run: |
        # Update the version in pyproject.toml
        sed -i "s/^version = \".*\"/version = \"${{ needs.version.outputs.versionTag }}\"/" pyproject.toml
        echo "Building release version: ${{ needs.version.outputs.versionTag }}"
        
    - name: Build package
      run: |
        uv build
        
    - name: Check dist contents
      run: |
        ls -la dist/
        
    - name: Get draft release
      id: draft
      run: |
        DRAFT_RELEASE=$(gh api repos/${{ github.repository }}/releases --jq '[.[] | select(.draft == true)] | first')
        if [ -z "$DRAFT_RELEASE" ] || [ "$DRAFT_RELEASE" = "null" ]; then
          echo "::error::No draft release found. Please ensure Release Drafter has created a draft."
          exit 1
        fi
        echo "draft_id=$(echo $DRAFT_RELEASE | jq -r .id)" >> $GITHUB_OUTPUT
        echo "Found draft release: $(echo $DRAFT_RELEASE | jq -r .tag_name)"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create and push tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        TAG="v${{ needs.version.outputs.versionTag }}"
        git tag -a "$TAG" -m "Release $TAG"
        git push origin "$TAG"
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        
    - name: Publish GitHub Release
      run: |
        # Update draft with correct tag and publish it
        gh release edit ${{ steps.draft.outputs.draft_id }} \
          --tag "v${{ needs.version.outputs.versionTag }}" \
          --title "v${{ needs.version.outputs.versionTag }}" \
          --draft=false \
          --latest
        
        # Upload built artifacts to the release
        gh release upload "v${{ needs.version.outputs.versionTag }}" dist/* --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}