name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: "0.5.11"

jobs:
  version:
    name: Calculate Version
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      versionTag: ${{ steps.gitversion.outputs.majorMinorPatch }}
      preReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}
      pep440Version: ${{ steps.pep440.outputs.pep440_version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Full history for GitVersion
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v4
      with:
        versionSpec: '6.x'
        
    - name: Calculate version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v4
        
    - name: Display version
      run: |
        echo "Version: ${{ steps.gitversion.outputs.semVer }}"
        echo "Major: ${{ steps.gitversion.outputs.major }}"
        echo "Minor: ${{ steps.gitversion.outputs.minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.patch }}"
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
        echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
        
    - name: Convert to PEP 440 compliant version
      id: pep440
      run: |
        VERSION="${{ steps.gitversion.outputs.semVer }}"
        # Convert GitVersion format to PEP 440
        # Examples: 0.0.1-pr.15 -> 0.0.1.dev15, 0.0.1-alpha.1 -> 0.0.1a1
        if [[ "$VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-pr\.([0-9]+)$ ]]; then
          PEP_VERSION="${BASH_REMATCH[1]}.dev${BASH_REMATCH[2]}"
        elif [[ "$VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-alpha\.([0-9]+)$ ]]; then
          PEP_VERSION="${BASH_REMATCH[1]}a${BASH_REMATCH[2]}"
        elif [[ "$VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-beta\.([0-9]+)$ ]]; then
          PEP_VERSION="${BASH_REMATCH[1]}b${BASH_REMATCH[2]}"
        elif [[ "$VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-rc\.([0-9]+)$ ]]; then
          PEP_VERSION="${BASH_REMATCH[1]}rc${BASH_REMATCH[2]}"
        else
          PEP_VERSION="$VERSION"
        fi
        echo "pep440_version=$PEP_VERSION" >> $GITHUB_OUTPUT
        echo "Converted version: $VERSION -> $PEP_VERSION"

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    needs: version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: ${{ env.UV_VERSION }}
        enable-cache: true
        
    - name: Install dependencies
      run: uv sync --all-extras
        
    # Custom linters - MUST run first
    - name: Architecture compliance check
      run: python linters/check-architecture-compliance.py clearflow tests examples linters
      
    - name: Immutability compliance check
      run: python linters/check-immutability.py clearflow tests examples linters
      
    - name: Test suite compliance check
      run: python linters/check-test-suite-compliance.py clearflow tests examples linters
        
    # Ruff checks
    - name: Run ruff linting with auto-fix
      run: uv run ruff check --fix clearflow tests examples linters
      
    - name: Verify no unfixed linting issues
      run: uv run ruff check --exit-non-zero-on-fix clearflow tests examples linters
      
    - name: Run ruff formatting
      run: uv run ruff format clearflow tests examples linters
      
    - name: Verify formatting is correct
      run: uv run ruff format --check clearflow tests examples linters
      
    # Type checking
    - name: Run pyright type checking
      run: PYRIGHT_PYTHON_FORCE_VERSION=latest uv run pyright clearflow tests examples linters
      
    # Complexity and dead code checks
    - name: Xenon complexity check
      run: |
        # Check non-linter code with Grade A requirement (excluding .venv)
        uv run xenon --max-average A --max-modules A --max-absolute A -e "*/.venv/*,*/venv/*" clearflow tests examples
        # Check linters with Grade B requirement (infrastructure code)
        uv run xenon --max-average B --max-modules B --max-absolute B -e "*/.venv/*,*/venv/*" linters
      
    - name: Vulture dead code detection
      run: |
        vulture_output=$(uv run vulture clearflow tests examples linters --exclude "*/.venv/*,*/venv/*" --min-confidence 80 2>&1 || true)
        if echo "$vulture_output" | grep -q "unused"; then
          echo "Dead code detected:"
          echo "$vulture_output"
          exit 1
        fi
      
    - name: Radon complexity metrics
      run: |
        radon_output=$(uv run radon cc clearflow tests examples linters -e "*/.venv/*,*/venv/*" -a 2>&1)
        echo "$radon_output"
        if echo "$radon_output" | grep -q "Average complexity: "; then
          avg_grade=$(echo "$radon_output" | sed -n 's/.*Average complexity: \([A-F]\).*/\1/p')
          if [[ "$avg_grade" != "A" ]]; then
            echo "Average complexity Grade $avg_grade exceeds maximum allowed Grade A"
            exit 1
          fi
        fi

  test-matrix:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: version
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.13"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: ${{ env.UV_VERSION }}
        enable-cache: true
        
    - name: Update version in pyproject.toml
      shell: bash
      run: |
        # Update the version in pyproject.toml with PEP 440 compliant version
        VERSION="${{ needs.version.outputs.pep440Version }}"
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          sed -i '' "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        else
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        fi
        echo "Updated version to: $VERSION"
        
    - name: Install dependencies
      run: uv sync --all-extras
        
    - name: Run tests with coverage
      run: uv run pytest -x -v tests --cov=clearflow --cov-report=xml --cov-report=term-missing --cov-fail-under=100
        
    - name: Upload coverage to Coveralls
      if: matrix.os == 'ubuntu-latest' && github.repository == 'artificial-sapience/clearflow'
      uses: coverallsapp/github-action@v2
      with:
        files: coverage.xml
        format: cobertura
        github-token: ${{ secrets.GITHUB_TOKEN }}


  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: ${{ env.UV_VERSION }}
        
    - name: Update version in pyproject.toml
      shell: bash
      run: |
        # Update the version in pyproject.toml with PEP 440 compliant version
        VERSION="${{ needs.version.outputs.pep440Version }}"
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          sed -i '' "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        else
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        fi
        echo "Building version: $VERSION"
        
    - name: Build package
      run: |
        uv build
        
    - name: Check dist contents
      run: |
        ls -la dist/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ needs.version.outputs.version }}
        path: dist/

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: ${{ env.UV_VERSION }}
        enable-cache: true
        
    - name: Install dependencies
      run: uv sync --all-extras
        
    - name: CVE scan with pip-audit
      run: |
        # PYSEC-2022-42969: py library ReDoS vulnerability - approved suppression for test dependency
        uv run pip-audit --fix --desc --ignore-vuln PYSEC-2022-42969
        
    - name: AST security analysis with Bandit
      run: |
        # Exclude tests from security analysis
        uv run bandit -r clearflow examples linters -f txt 2>&1 | tail -5