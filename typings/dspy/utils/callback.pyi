from typing import Any

from _typeshed import Incomplete

ACTIVE_CALL_ID: Incomplete
logger: Incomplete

class BaseCallback:
    def on_module_start(self, call_id: str, instance: Any, inputs: dict[str, Any]): ...
    def on_module_end(self, call_id: str, outputs: Any | None, exception: Exception | None = None): ...
    def on_lm_start(self, call_id: str, instance: Any, inputs: dict[str, Any]): ...
    def on_lm_end(self, call_id: str, outputs: dict[str, Any] | None, exception: Exception | None = None): ...
    def on_adapter_format_start(self, call_id: str, instance: Any, inputs: dict[str, Any]): ...
    def on_adapter_format_end(self, call_id: str, outputs: dict[str, Any] | None, exception: Exception | None = None): ...
    def on_adapter_parse_start(self, call_id: str, instance: Any, inputs: dict[str, Any]): ...
    def on_adapter_parse_end(self, call_id: str, outputs: dict[str, Any] | None, exception: Exception | None = None): ...
    def on_tool_start(self, call_id: str, instance: Any, inputs: dict[str, Any]): ...
    def on_tool_end(self, call_id: str, outputs: dict[str, Any] | None, exception: Exception | None = None): ...
    def on_evaluate_start(self, call_id: str, instance: Any, inputs: dict[str, Any]): ...
    def on_evaluate_end(self, call_id: str, outputs: Any | None, exception: Exception | None = None): ...

def with_callbacks(fn): ...
