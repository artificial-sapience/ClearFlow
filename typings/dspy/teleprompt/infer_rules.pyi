import dspy
from _typeshed import Incomplete
from dspy.evaluate.evaluate import Evaluate as Evaluate
from dspy.teleprompt import BootstrapFewShot as BootstrapFewShot

logger: Incomplete

class InferRules(BootstrapFewShot):
    num_candidates: Incomplete
    num_rules: Incomplete
    num_threads: Incomplete
    rules_induction_program: Incomplete
    metric: Incomplete
    max_errors: Incomplete
    def __init__(self, num_candidates: int = 10, num_rules: int = 10, num_threads=None, teacher_settings=None, **kwargs) -> None: ...
    def compile(self, student, *, teacher=None, trainset, valset=None): ...
    def induce_natural_language_rules(self, predictor, trainset): ...
    def update_program_instructions(self, predictor, natural_language_rules) -> None: ...
    def format_examples(self, demos, signature): ...
    def get_predictor_demos(self, trainset, predictor): ...
    def evaluate_program(self, program, dataset): ...

class RulesInductionProgram(dspy.Module):
    rules_induction: Incomplete
    teacher_settings: Incomplete
    rng: Incomplete
    def __init__(self, num_rules, teacher_settings=None) -> None: ...
    def forward(self, examples_text): ...
