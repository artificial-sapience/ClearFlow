from typing import Any

from _typeshed import Incomplete
from dspy.clients.provider import Provider as Provider
from dspy.clients.provider import TrainingJob as TrainingJob
from dspy.clients.utils_finetune import TrainDataFormat as TrainDataFormat
from dspy.clients.utils_finetune import TrainingStatus as TrainingStatus
from dspy.clients.utils_finetune import save_data as save_data

class TrainingJobOpenAI(TrainingJob):
    provider_file_id: Incomplete
    provider_job_id: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cancel(self) -> None: ...
    def status(self) -> TrainingStatus: ...

class OpenAIProvider(Provider):
    finetunable: bool
    TrainingJob: Incomplete
    def __init__(self) -> None: ...
    @staticmethod
    def is_provider_model(model: str) -> bool: ...
    @staticmethod
    def finetune(job: TrainingJobOpenAI, model: str, train_data: list[dict[str, Any]], train_data_format: TrainDataFormat | None, train_kwargs: dict[str, Any] | None = None) -> str: ...
    @staticmethod
    def does_job_exist(job_id: str) -> bool: ...
    @staticmethod
    def does_file_exist(file_id: str) -> bool: ...
    @staticmethod
    def is_terminal_training_status(status: TrainingStatus) -> bool: ...
    @staticmethod
    def get_training_status(job_id: str) -> TrainingStatus: ...
    @staticmethod
    def validate_data_format(data_format: TrainDataFormat): ...
    @staticmethod
    def upload_data(data_path: str) -> str: ...
    @staticmethod
    def wait_for_job(job: TrainingJobOpenAI, poll_frequency: int = 20): ...
    @staticmethod
    def get_trained_model(job): ...
