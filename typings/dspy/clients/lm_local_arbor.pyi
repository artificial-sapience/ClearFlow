import abc
from typing import Any, TypedDict

from _typeshed import Incomplete
from dspy.clients.lm import LM as LM
from dspy.clients.provider import Provider as Provider
from dspy.clients.provider import ReinforceJob as ReinforceJob
from dspy.clients.provider import TrainingJob as TrainingJob
from dspy.clients.utils_finetune import GRPOGroup as GRPOGroup
from dspy.clients.utils_finetune import TrainDataFormat as TrainDataFormat
from dspy.clients.utils_finetune import TrainingStatus as TrainingStatus
from dspy.clients.utils_finetune import save_data as save_data

class GRPOTrainKwargs(TypedDict):
    num_generations: int

class ArborTrainingJob(TrainingJob):
    provider_file_id: Incomplete
    provider_job_id: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cancel(self) -> None: ...
    def status(self) -> TrainingStatus: ...

class ArborReinforceJob(ReinforceJob, metaclass=abc.ABCMeta):
    DEFAULT_TRAIN_KWARGS: Incomplete
    lm: Incomplete
    train_kwargs: Incomplete
    provider_job_id: Incomplete
    checkpoints: Incomplete
    last_checkpoint: Incomplete
    def __init__(self, lm: LM, train_kwargs: GRPOTrainKwargs) -> None: ...
    def initialize(self) -> None: ...
    def step(self, train_data: list[GRPOGroup], train_data_format: TrainDataFormat | str | None): ...
    def save_checkpoint(self, checkpoint_name: str, score: float | None = None): ...
    def terminate(self) -> None: ...
    def cancel(self) -> None: ...
    def status(self) -> TrainingStatus: ...

class ArborProvider(Provider):
    finetunable: bool
    reinforceable: bool
    TrainingJob: Incomplete
    ReinforceJob: Incomplete
    def __init__(self) -> None: ...
    @staticmethod
    def launch(lm: LM, launch_kwargs: dict[str, Any] | None = None): ...
    @staticmethod
    def kill(lm: LM, launch_kwargs: dict[str, Any] | None = None): ...
    @staticmethod
    def finetune(job: ArborTrainingJob, model: str, train_data: list[dict[str, Any]], train_data_format: TrainDataFormat | None, train_kwargs: dict[str, Any] | None = None) -> str: ...
    @staticmethod
    def does_job_exist(job_id: str, training_kwargs: dict[str, Any]) -> bool: ...
    @staticmethod
    def does_file_exist(file_id: str, training_kwargs: dict[str, Any]) -> bool: ...
    @staticmethod
    def is_terminal_training_status(status: TrainingStatus) -> bool: ...
    @staticmethod
    def get_training_status(job_id: str, training_kwargs: dict[str, Any]) -> TrainingStatus: ...
    @staticmethod
    def validate_data_format(data_format: TrainDataFormat): ...
    @staticmethod
    def upload_data(data_path: str, training_kwargs: dict[str, Any]) -> str: ...
    @staticmethod
    def wait_for_job(job: TrainingJob, training_kwargs: dict[str, Any], poll_frequency: int = 20): ...
    @staticmethod
    def get_trained_model(job, training_kwargs: dict[str, Any]): ...
