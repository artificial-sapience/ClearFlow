from typing import Any

from _typeshed import Incomplete

logger: Incomplete

class Cache:
    enable_disk_cache: Incomplete
    enable_memory_cache: Incomplete
    memory_cache: Incomplete
    disk_cache: Incomplete
    def __init__(self, enable_disk_cache: bool, enable_memory_cache: bool, disk_cache_dir: str, disk_size_limit_bytes: int | None = ..., memory_max_entries: int | None = 1000000) -> None: ...
    def __contains__(self, key: str) -> bool: ...
    def cache_key(self, request: dict[str, Any], ignored_args_for_cache_key: list[str] | None = None) -> str: ...
    def get(self, request: dict[str, Any], ignored_args_for_cache_key: list[str] | None = None) -> Any: ...
    def put(self, request: dict[str, Any], value: Any, ignored_args_for_cache_key: list[str] | None = None, enable_memory_cache: bool = True) -> None: ...
    def reset_memory_cache(self) -> None: ...
    def save_memory_cache(self, filepath: str) -> None: ...
    def load_memory_cache(self, filepath: str) -> None: ...

def request_cache(cache_arg_name: str | None = None, ignored_args_for_cache_key: list[str] | None = None, enable_memory_cache: bool = True, *, maxsize: int | None = None): ...
