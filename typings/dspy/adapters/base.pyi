from typing import Any

from _typeshed import Incomplete
from dspy.adapters.types import History as History
from dspy.adapters.types.base_type import (
    split_message_content_for_custom_types as split_message_content_for_custom_types,
)
from dspy.adapters.types.tool import Tool as Tool
from dspy.adapters.types.tool import ToolCalls as ToolCalls
from dspy.clients.lm import LM as LM
from dspy.signatures.signature import Signature as Signature
from dspy.utils.callback import BaseCallback as BaseCallback
from dspy.utils.callback import with_callbacks as with_callbacks

logger: Incomplete

class Adapter:
    callbacks: Incomplete
    use_native_function_calling: Incomplete
    def __init__(self, callbacks: list[BaseCallback] | None = None, use_native_function_calling: bool = False) -> None: ...
    def __init_subclass__(cls, **kwargs) -> None: ...
    def __call__(self, lm: LM, lm_kwargs: dict[str, Any], signature: type[Signature], demos: list[dict[str, Any]], inputs: dict[str, Any]) -> list[dict[str, Any]]: ...
    async def acall(self, lm: LM, lm_kwargs: dict[str, Any], signature: type[Signature], demos: list[dict[str, Any]], inputs: dict[str, Any]) -> list[dict[str, Any]]: ...
    def format(self, signature: type[Signature], demos: list[dict[str, Any]], inputs: dict[str, Any]) -> list[dict[str, Any]]: ...
    def format_field_description(self, signature: type[Signature]) -> str: ...
    def format_field_structure(self, signature: type[Signature]) -> str: ...
    def format_task_description(self, signature: type[Signature]) -> str: ...
    def format_user_message_content(self, signature: type[Signature], inputs: dict[str, Any], prefix: str = "", suffix: str = "", main_request: bool = False) -> str: ...
    def format_assistant_message_content(self, signature: type[Signature], outputs: dict[str, Any], missing_field_message: str | None = None) -> str: ...
    def format_demos(self, signature: type[Signature], demos: list[dict[str, Any]]) -> list[dict[str, Any]]: ...
    def format_conversation_history(self, signature: type[Signature], history_field_name: str, inputs: dict[str, Any]) -> list[dict[str, Any]]: ...
    def parse(self, signature: type[Signature], completion: str) -> dict[str, Any]: ...
