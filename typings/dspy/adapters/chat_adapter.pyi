from typing import Any, NamedTuple

from _typeshed import Incomplete
from dspy.adapters.base import Adapter as Adapter
from dspy.adapters.utils import format_field_value as format_field_value
from dspy.adapters.utils import get_annotation_name as get_annotation_name
from dspy.adapters.utils import (
    get_field_description_string as get_field_description_string,
)
from dspy.adapters.utils import parse_value as parse_value
from dspy.adapters.utils import translate_field_type as translate_field_type
from dspy.clients.lm import LM as LM
from dspy.signatures.signature import Signature as Signature
from dspy.utils.exceptions import AdapterParseError as AdapterParseError
from pydantic.fields import FieldInfo as FieldInfo

field_header_pattern: Incomplete

class FieldInfoWithName(NamedTuple):
    name: str
    info: FieldInfo

class ChatAdapter(Adapter):
    def __call__(self, lm: LM, lm_kwargs: dict[str, Any], signature: type[Signature], demos: list[dict[str, Any]], inputs: dict[str, Any]) -> list[dict[str, Any]]: ...
    async def acall(self, lm: LM, lm_kwargs: dict[str, Any], signature: type[Signature], demos: list[dict[str, Any]], inputs: dict[str, Any]) -> list[dict[str, Any]]: ...
    def format_field_description(self, signature: type[Signature]) -> str: ...
    def format_field_structure(self, signature: type[Signature]) -> str: ...
    def format_task_description(self, signature: type[Signature]) -> str: ...
    def format_user_message_content(self, signature: type[Signature], inputs: dict[str, Any], prefix: str = "", suffix: str = "", main_request: bool = False) -> str: ...
    def user_message_output_requirements(self, signature: type[Signature]) -> str: ...
    def format_assistant_message_content(self, signature: type[Signature], outputs: dict[str, Any], missing_field_message=None) -> str: ...
    def parse(self, signature: type[Signature], completion: str) -> dict[str, Any]: ...
    def format_field_with_value(self, fields_with_values: dict[FieldInfoWithName, Any]) -> str: ...
    def format_finetune_data(self, signature: type[Signature], demos: list[dict[str, Any]], inputs: dict[str, Any], outputs: dict[str, Any]) -> dict[str, list[Any]]: ...
