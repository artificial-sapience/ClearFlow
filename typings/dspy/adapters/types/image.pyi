from typing import Any

from _typeshed import Incomplete
from dspy.adapters.types.base_type import Type as Type
from PIL import Image as PILImage

PIL_AVAILABLE: bool

class Image(Type):
    url: str
    model_config: Incomplete
    def format(self) -> list[dict[str, Any]] | str: ...
    @classmethod
    def validate_input(cls, values): ...
    @classmethod
    def from_url(cls, url: str, download: bool = False): ...
    @classmethod
    def from_file(cls, file_path: str): ...
    @classmethod
    def from_PIL(cls, pil_image): ...

def is_url(string: str) -> bool: ...
def encode_image(image: str | bytes | PILImage.Image | dict, download_images: bool = False) -> str: ...
def is_image(obj) -> bool: ...
