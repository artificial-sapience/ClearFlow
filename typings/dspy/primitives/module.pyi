from typing import Any, List, Optional

from _typeshed import Incomplete
from dspy.dsp.utils.settings import settings as settings
from dspy.dsp.utils.settings import thread_local_overrides as thread_local_overrides
from dspy.predict.parallel import Parallel as Parallel
from dspy.primitives.base_module import BaseModule as BaseModule
from dspy.primitives.example import Example as Example
from dspy.utils.callback import BaseCallback as BaseCallback
from dspy.utils.callback import with_callbacks as with_callbacks
from dspy.utils.inspect_history import pretty_print_history as pretty_print_history
from dspy.utils.usage_tracker import track_usage as track_usage

logger: Incomplete

class ProgramMeta(type):
    def __call__(cls, *args, **kwargs): ...

class Module(BaseModule, metaclass=ProgramMeta):
    callbacks: list[BaseCallback] | None
    history: list[Any]
    def __init__(self, callbacks: list[BaseCallback] | None = None) -> None: ...
    @with_callbacks
    def __call__(self, *args, **kwargs): ...
    @with_callbacks
    async def acall(self, *args, **kwargs): ...
    def named_predictors(self): ...
    def predictors(self): ...
    def set_lm(self, lm) -> None: ...
    def get_lm(self): ...
    def map_named_predictors(self, func): ...
    def inspect_history(self, n: int = 1): ...
    def batch(self, examples: list[Example], num_threads: int | None = None, max_errors: int | None = None, return_failed_examples: bool = False, provide_traceback: bool | None = None, disable_progress_bar: bool = False) -> list[Example] | tuple[list[Example], list[Example], list[Exception]]: ...
    def __getattribute__(self, name): ...

def set_attribute_by_name(obj, name, value) -> None: ...
