from typing import Any, Protocol

from _typeshed import Incomplete
from dspy.primitives.example import Example as Example

class HasProposalResponse(Protocol):
    proposal_response: str

class HasObjectionResponse(Protocol):
    objection_response: str

class HasAmendmentResponse(Protocol):
    amendment_response: str

class HasSynthesisResponse(Protocol):
    synthesis_response: str

class Prediction(Example):
    def __init__(self, *args, **kwargs) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def get_lm_usage(self): ...
    def set_lm_usage(self, value) -> None: ...
    @classmethod
    def from_completions(cls, list_or_dict, signature=None): ...
    def __float__(self) -> float: ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __truediv__(self, other): ...
    def __rtruediv__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    @property
    def completions(self): ...

class Completions:
    signature: Incomplete
    def __init__(self, list_or_dict, signature=None) -> None: ...
    def items(self): ...
    def __getitem__(self, key): ...
    def __getattr__(self, name: str) -> Any: ...
    def __len__(self) -> int: ...
    def __contains__(self, key) -> bool: ...
