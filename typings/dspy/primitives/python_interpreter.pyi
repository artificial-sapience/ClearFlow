from os import PathLike
from types import TracebackType
from typing import Any

from _typeshed import Incomplete

class InterpreterError(RuntimeError): ...

class PythonInterpreter:
    enable_read_paths: Incomplete
    enable_write_paths: Incomplete
    enable_env_vars: Incomplete
    enable_network_access: Incomplete
    sync_files: Incomplete
    deno_command: Incomplete
    deno_process: Incomplete
    def __init__(self, deno_command: list[str] | None = None, enable_read_paths: list[PathLike | str] | None = None, enable_write_paths: list[PathLike | str] | None = None, enable_env_vars: list[str] | None = None, enable_network_access: list[str] | None = None, sync_files: bool = True) -> None: ...
    def execute(self, code: str, variables: dict[str, Any] | None = None) -> Any: ...
    def __enter__(self): ...
    def __exit__(self, _exc_type: type[BaseException] | None, _exc_val: BaseException | None, _exc_tb: TracebackType | None): ...
    def __call__(self, code: str, variables: dict[str, Any] | None = None) -> Any: ...
    def shutdown(self) -> None: ...
