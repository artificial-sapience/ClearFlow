from typing import Any

from _typeshed import Incomplete
from dspy.clients.cache import request_cache as request_cache
from dspy.dsp.utils import dotdict as dotdict

class ColBERTv2:
    post_requests: Incomplete
    url: Incomplete
    def __init__(self, url: str = "http://0.0.0.0", port: str | int | None = None, post_requests: bool = False) -> None: ...
    def __call__(self, query: str, k: int = 10, simplify: bool = False) -> list[str] | list[dotdict]: ...

def colbertv2_get_request_v2(url: str, query: str, k: int): ...
def colbertv2_get_request_v2_wrapped(*args, **kwargs): ...
colbertv2_get_request = colbertv2_get_request_v2_wrapped

def colbertv2_post_request_v2(url: str, query: str, k: int): ...
def colbertv2_post_request_v2_wrapped(*args, **kwargs): ...
colbertv2_post_request = colbertv2_post_request_v2_wrapped

class ColBERTv2RetrieverLocal:
    colbert_config: Incomplete
    passages: Incomplete
    searcher: Incomplete
    def __init__(self, passages: list[str], colbert_config=None, load_only: bool = False) -> None: ...
    def build_index(self) -> None: ...
    def get_index(self): ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def forward(self, query: str, k: int = 7, **kwargs): ...

class ColBERTv2RerankerLocal:
    colbert_config: Incomplete
    checkpoint: Incomplete
    def __init__(self, colbert_config=None, checkpoint: str = "bert-base-uncased") -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def forward(self, query: str, passages: list[str] | None = None): ...
