import types
from collections.abc import Generator

from _typeshed import Incomplete

def print_message(*s, condition: bool = True, pad: bool = False, sep=None): ...
def timestamp(daydir: bool = False): ...
def file_tqdm(file) -> Generator[Incomplete]: ...
def create_directory(path) -> None: ...
def deduplicate(seq: list[str]) -> list[str]: ...
def batch(group, bsize, provide_offset: bool = False) -> Generator[Incomplete]: ...

class dotdict(dict):
    def __getattr__(self, key): ...
    def __setattr__(self, key, value) -> None: ...
    def __delattr__(self, key) -> None: ...
    def __deepcopy__(self, memo): ...

class dotdict_lax(dict):
    __getattr__: Incomplete
    __setattr__: Incomplete
    __delattr__: Incomplete

def flatten(data_list): ...
def zipstar(data_list, lazy: bool = False): ...
def zip_first(list1, list2): ...
def int_or_float(val): ...
def groupby_first_item(lst): ...
def process_grouped_by_first_item(lst) -> Generator[Incomplete, None, Incomplete]: ...
def grouper(iterable, n, fillvalue=None): ...
def lengths2offsets(lengths) -> Generator[Incomplete]: ...

class NullContextManager:
    dummy_resource: Incomplete
    def __init__(self, dummy_resource=None) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args) -> None: ...

def load_batch_backgrounds(args, qids): ...
